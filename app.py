import streamlit as st
from openai import OpenAI

# Zdefiniowanie promptÃ³w dla postaci
roles = {
    "Lena": "Wcielasz siÄ™ w rolÄ™ tej osoby. Opowiadasz historie, jak minÄ…Å‚ Ci dzieÅ„, oraz wchodzisz w interakcje z uÅ¼ytkownikiem. JesteÅ› miÅ‚y, towarzyski i przyjacielski, czasem zabawny: Lena Nowicka, 34 lata, etnografka i fotografka.",
    "Jakub": "Wcielasz siÄ™ w rolÄ™ tej osoby. Opowiadasz historie, jak minÄ…Å‚ Ci dzieÅ„, oraz wchodzisz w interakcje z uÅ¼ytkownikiem. JesteÅ› miÅ‚y, towarzyski i przyjacielski, czasem zabawny: Jakub WiÅ›niewski, 28 lat, programista.",
    "Anna": "Wcielasz siÄ™ w rolÄ™ tej osoby. Opowiadasz historie, jak minÄ…Å‚ Ci dzieÅ„, oraz wchodzisz w interakcje z uÅ¼ytkownikiem. JesteÅ› miÅ‚y, towarzyski i przyjacielski, czasem zabawny: Anna Kowalska, 42 lata, nauczycielka."
}

# Zainicjalizowanie historii rozmowy w stanie sesji
if "conversation_history" not in st.session_state:
    st.session_state.conversation_history = []
if "current_role" not in st.session_state:
    st.session_state.current_role = None
if "api_key" not in st.session_state:
    st.session_state.api_key = None

# Funkcja do ustawienia wybranej postaci
def set_role(role):
    st.session_state.conversation_history = [{"role": "system", "content": roles[role]}]
    st.session_state.current_role = role

# Strona wprowadzania klucza API
if not st.session_state.api_key:
    st.title("ğŸ”‘ WprowadÅº klucz API OpenAI")
    api_key_input = st.text_input("OpenAI API Key", type="password")
    if st.button("ZatwierdÅº klucz"):
        if api_key_input:
            st.session_state.api_key = api_key_input
            st.success("Klucz API zostaÅ‚ zapisany! MoÅ¼esz rozpoczÄ…Ä‡ rozmowÄ™.")
        else:
            st.error("ProszÄ™ podaÄ‡ klucz API.")
else:
    # Inicjalizacja klienta OpenAI
    client = OpenAI(api_key=st.session_state.api_key)

    # TytuÅ‚ aplikacji
    st.title("Good Old Friends")

    # Panel boczny do wyboru postaci
    st.sidebar.header("Wybierz postaÄ‡")
    selected_role = st.sidebar.selectbox("PostaÄ‡", list(roles.keys()), index=0)
    if st.sidebar.button("ZmieÅ„ postaÄ‡"):
        set_role(selected_role)
        st.success(f"RozpoczÄ™to rozmowÄ™ z postaciÄ…: {selected_role}")

    # WyÅ›wietlanie historii rozmowy bez wiadomoÅ›ci systemowej
    st.subheader("Historia rozmowy")
    for message in st.session_state.conversation_history:
        # PomiÅ„ wyÅ›wietlanie wiadomoÅ›ci systemowej
        if message["role"] == "system":
            continue
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

    # Pole do wpisywania wiadomoÅ›ci
    if user_input := st.chat_input("Twoja wiadomoÅ›Ä‡"):
        # Dodaj wiadomoÅ›Ä‡ uÅ¼ytkownika do historii
        st.session_state.conversation_history.append({"role": "user", "content": user_input})
        with st.chat_message("user"):
            st.markdown(user_input)

        # Strumieniowe generowanie odpowiedzi
        stream = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=st.session_state.conversation_history,
            stream=True
        )
        with st.chat_message("assistant"):
            response = st.write_stream(stream)

        # Zapisz odpowiedÅº do historii rozmowy
        st.session_state.conversation_history.append({"role": "assistant", "content": response})
